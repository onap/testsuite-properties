#!/usr/bin/env python
# encoding: utf-8
'''
Compares keys in integration_preload_parameters.py with env.yaml files from the demo repo


Usage: DiffTemplates.py <heat template folder>

Writes report.html to view side by side in a browser

Reports keys missing from the each to stdout

Keys reported missing from the integration_preload_parameters may be significant

Keys reported missing from the env file are typically from the 'defaults' and should be benign.

'''

import sys
import os
import integration_preload_parameters
import yaml

from optparse import OptionParser, Values

__all__ = []
__version__ = 0.1
__date__ = '2017-04-07'
__updated__ = '2017-04-07'

DEBUG = 1
TESTRUN = 0
PROFILE = 0
import time
import logging

def main(argv=None):
    '''Command line options.'''
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2017 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    # setup option parser
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("-f", "--folder", dest="heatfolder", help="location of heat templates")
    (opts, args) = parser.parse_args(argv)

    html = "<html><body>\n"
    for testcase in integration_preload_parameters.GLOBAL_PRELOAD_PARAMETERS:
        if testcase == 'defaults':
            continue
        for template in integration_preload_parameters.GLOBAL_PRELOAD_PARAMETERS[testcase]:
            filename = getEnvFileName(template)
            if filename == "":
                print("\n\n***** No env file for template {}").format(template)
                continue
            str = opts.heatfolder + "/" + filename
            f = open (str, "r")
            data = f.read()
            env = yaml.load(data)
            f.close()

            #for name in env['parameters'].keys():
            #    print "{} = {}".format(name, env['parameters'][name])

            print("\n\n########## {} : {} ###########").format(testcase, template)
            ppdict = integration_preload_parameters.GLOBAL_PRELOAD_PARAMETERS['defaults'].copy()
            ppdict.update(integration_preload_parameters.GLOBAL_PRELOAD_PARAMETERS[testcase][template])
            compareDictionaries(str, env['parameters'], testcase + "." + template, ppdict)
            print("\n")
            compareDictionaries(testcase+ "." + template, ppdict,str, env['parameters'], )
            html = html + htmlDiff(testcase+ "." + template, ppdict,str, env['parameters'], )
    html = html + "</body></html>"
    o = open("report.html", "w")
    o.write(html)
    o.close()

def getEnvFileName(template):
    template_mapping = {
    "vfw_preload.template" : "vFW/base_vfw.env",
    "vlb_preload.template" : "vLB/base_vlb.env",
    "dnsscaling_preload.template" : "vLB/dnsscaling.env",
    "vvg_preload.template" : "vVG/base_vvg.env",
    "vcpe_preload.template" : "vCPE/base_clearwater.env",
    "vfwsnk_preload.template" : "vFWCL/vFWSNK/base_vfw.env",
    "vpkg_preload.template" : "vFWCL/vPKG/base_vpkg.env",
    "vims_preload.template" : "",
    "base_vcpe_infra_preload.template" : "vCPE/infra/base_vcpe_infra.env",
    "base_vcpe_vbng_preload.template" : "vCPE/vbng/base_vcpe_vbng.env",
    "base_vcpe_vgw_preload.template" : "vCPE/vgw/base_vcpe_vgw.env",
    "base_vcpe_vgmux_preload.template" : "vCPE/vgmux/base_vcpe_vgmux.env",
    "base_vcpe_vgmenu_preload.template" : "vCPE/vbrgemu/base_vcpe_vbrgemu.env",
    }
    return template_mapping[template]

def compareDictionaries(aname, adict, bname, bdict):
    print "##\nComparing {} to {}".format(aname, bname)
    testa = adict.copy()
    for name in adict:
        if name in bdict:
            testa.pop(name, None)
    print "\nKeys in {} missing from {}\n".format(aname, bname)
    for name in testa:
        print "  {} = {}".format(name, testa[name])

def htmlDiff(aname, adict, bname, bdict):
    ml = "<h1>" + aname + "</h1>\n"
    ml = ml + "<table border=\"1\">\n"
    ml = ml + "<tr><th>Key</th><th>" + aname + "</th><th>" + bname + "</th></tr>\n"
    t = {}
    for name in adict:
        t[name] = {}
        t[name]['a'] = adict[name]
        t[name]['b'] = ''
    for name in bdict:
        if name not in t:
            t[name] = {}
            t[name]['a'] = ''
        t[name]['b'] = bdict[name]

    for name in t:
        ml = ml + "<tr><td>" + name + "</td><td>" + str(t[name]['a']) + "</td><td>" + str(t[name]['b'])  + "</td></tr>\n"
    ml = ml + "</table>\n"

    return ml



if __name__ == "__main__":
    if DEBUG:
        print "debug"
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'loadtest.TestMain_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())